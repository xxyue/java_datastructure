 /**
  *
  * 图形 ：  https://www.processon.com/diagraming/5cb008cfe4b02a2858e8cfcf
 *
 *  树的基本概念
  *  斜树
  *  满二叉树
  *  完全二叉树
  *  平衡二叉树
  *  红黑树
  *  B+树
  *
  *
  *
  *  二叉树的前、中、后序遍历和层次遍历
  *  实战二叉树最大深度和最小深度
  *  实战查找两个节点的最近公共祖先
  *  面试真题 先序、中序数组结合重构二叉树
  *
  *  树的基本概念
  *     https://www.processon.com/diagraming/5cb008cfe4b02a2858e8cfcf
  *
  *      二叉树
  *         是每个节点最多有两个子树的树结构
  *             左子树（left subtree）
  *             右子树（right subtree）
  *         特点：
  *             二叉树的度不大于2的结点
  *             二叉树的左右之分，次序不可颠倒（故树的子树的左右不同 树也不同）
  *
  *      斜树
  *         所有的几点都只有左树叫左斜树
  *         所有的几点都只有右树叫右斜树
  *
  *          特点：
  *                结点的个数就是二叉树的深度
  *                斜树就是现行表结构
  *       满二叉树
  *             所有分支结点都有左右子树，并且叶节点在同一层
  *          特点：
  *             叶节点只能出现在最下一层
  *             非叶子节点的度一定是2
  *             同样深度的二叉树中，慢二叉树的结点个数最多，叶节点数最多
  *
  *        完全全二叉树
  *             若设二叉树的高度为h,除第层外，其他层的节点数都达到最大个数，
  *             第h层有叶子结点，并且叶子结点都是从左到右依次排布
  *            特点：
  *                 叶子节点只出现在最下两层
  *                 最下一层的叶子在并且连续
  *                 同样的节点数的二叉树，玩全二叉树的深度最小
  *
  *        平衡二叉树
  *             又称AVL树，他是一颗二叉排序树，
  *              特点：
  *                   他是一颗空树，或他的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一颗平衡二叉树
  *                   非叶子结点值大于左边子节点，小于右边子节点
  *                   没有值相等重复的节点
  *
  *        红黑树：
  *              因为平衡二叉树查询性能和树的层级（h高度）成反比，h值越小查询越快、
  *              为了保证树的结构左右两端数据大致平衡降低二叉树的查询难度一般会采用一种算法机制实现节点数据结构的平衡，
  *              实现了这种算法就有红黑树。
  *              红黑树的应用比较广泛，主要是用它来存储有序的数据
  *              ，它的时间复杂度是O(lgn)，效率非常之高。
  *              例如，Java集合中的TreeSet和TreeMap。
  *           特性:
  *             （1）每个节点或者是黑色，或者是红色。
  *             （2）根节点是黑色。
  *             （3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]
  *             （4）如果一个节点是红色的，则它的子节点必须是黑色的。
  *             （5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。
  *
  *
  *        B+树
  *        B+树充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。例如MySQL的数据库索引查找。
  *
  *         B+树的非叶子节点不保存关键字记录的指针，这样使得B+树每个节点所能保存的关键字大大增加；
  *         B+树叶子节点保存了父节点的所有关键字和关键字记录的指针，每个叶子节点的关键字从小到大链接；
  *         B+树的根节点关键字数量和其子节点个数相等;
  *         B+的非叶子节点只进行数据索引，不会存实际的关键字记录的指针，所有数据地址必须要到叶子节点才能获取到，所以每次数据查询的次数都一样；
  *
  *
  *
  *
  *     二叉树遍历：
  *         前序遍历：先访问根结点，然后遍历左子树，最后遍历右子树。
  *         中序遍历：先遍历左子树，然后遍历根结点，最后遍历右子树。
  *         后序遍历：先遍历左子树，然后遍历右子树，最后遍历根结点。
  *         层次遍历：从上到下逐层遍历，在同一层中，按从左到右的顺序遍历。
  *
  *
  *
  *
  *
  *
 *
 *
 *
 *
 */
